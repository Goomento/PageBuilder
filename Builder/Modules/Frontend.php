<?php
/**
 * @package Goomento_PageBuilder
 * @link https://github.com/Goomento/PageBuilder
 */

declare(strict_types=1);

namespace Goomento\PageBuilder\Builder\Modules;

use Goomento\PageBuilder\Api\Data\BuildableContentInterface;
use Goomento\PageBuilder\Builder\Fonts;
use Goomento\PageBuilder\Configuration;
use Goomento\PageBuilder\Builder\Base\AbstractApp;
use Goomento\PageBuilder\Builder\Css\ContentCss;
use Goomento\PageBuilder\Builder\Css\GlobalCss;
use Goomento\PageBuilder\Helper\BuildableContentHelper;
use Goomento\PageBuilder\Helper\HooksHelper;
use Goomento\PageBuilder\Helper\DataHelper;
use Goomento\PageBuilder\Helper\ObjectManagerHelper;
use Goomento\PageBuilder\Helper\RequestHelper;
use Goomento\PageBuilder\Helper\StateHelper;
use Goomento\PageBuilder\Helper\UrlBuilderHelper;
use Goomento\PageBuilder\Helper\ThemeHelper;

class Frontend extends AbstractApp
{
    const NAME = 'frontend';

    /**
     * Fonts to enqueue
     *
     * Holds the list of fonts that are being used in the current page.
     *
     *
     * @var array Used fonts. Default is an empty array.
     */
    public $fontsToEnqueue = [];

    /**
     * Registered fonts.
     *
     * Holds the list of enqueued fonts in the current page.
     *
     * @var array Registered fonts. Default is an empty array.
     */
    private $registeredFonts = [];

    /**
     * Filters removed from the content.
     *
     * @var array Filters removed from the content. Default is an empty array.
     */
    private $contentRemovedFilters = [];

    /**
     * Frontend constructor.
     */
    public function __construct()
    {
        HooksHelper::addAction('pagebuilder/frontend/init', [$this, 'init']);

        $this->addContentFilter();
    }

    /**
     * Init.
     *
     * Initialize SagoTheme front end. Hooks the needed actions to run SagoTheme
     * in the front end, including script and style registration.
     *
     *
     */
    public function init()
    {
        HooksHelper::addAction('pagebuilder/frontend/register_scripts', [$this, 'registerScripts'], 9);

        HooksHelper::addAction('pagebuilder/frontend/register_styles', [$this, 'registerStyles'], 9);

        HooksHelper::addAction('pagebuilder/frontend/header', [ $this, 'header' ], 9);
        HooksHelper::addAction('pagebuilder/frontend/footer', [ $this, 'footer' ], 9);
    }


    /**
     * Add content filter.
     *
     * Remove plain content and render the content generated by SagoTheme.
     *
     */
    public function addContentFilter()
    {
        HooksHelper::addFilter('pagebuilder/content/html', [ $this, 'applyBuilderInContent' ], 9);
    }

    /**
     * Remove content filter.
     *
     * When the SagoTheme generated content rendered, we remove the filter to prevent multiple
     * accuracies. This way we make sure SagoTheme renders the content only once.
     *
     */
    public function removeContentFilter()
    {
        HooksHelper::removeFilter('pagebuilder/content/html', [ $this, 'applyBuilderInContent' ], 9);
    }

    /**
     * Registers scripts.
     *
     * Registers all the frontend scripts.
     *
     * Fired by `pagebuilder/footer` action.
     *
     */
    public function registerScripts()
    {
        $minSuffix = Configuration::debug() ? '' : '.min';
        /**
         * Before frontend register scripts.
         *
         * Fires before SagoTheme frontend scripts are registered.
         *
         */
        HooksHelper::doAction('pagebuilder/frontend/before_register_scripts');

        ThemeHelper::registerScript(
            'goomento-frontend-modules',
            'Goomento_PageBuilder/build/frontend-modules' . $minSuffix,
            [
                'jquery',
                'jquery/ui',
            ]
        );

        ThemeHelper::registerScript(
            'goomento-frontend-engine',
            'Goomento_PageBuilder/build/frontend' . $minSuffix,
            [
                'jquery',
                'dialogs-manager',
                'waypoints',
                'pagebuilderRegister',
                'goomento-frontend-modules',
            ]
        );

        ThemeHelper::registerScript(
            'goomento-frontend',
            'Goomento_PageBuilder/js/frontend-entry',
            ['underscore']
        );

        $this->printConfig();

        /**
         * After frontend register scripts.
         *
         * Fires after SagoTheme frontend scripts are registered.
         *
         */
        HooksHelper::doAction('pagebuilder/frontend/after_register_scripts');
    }

    /**
     * Registers styles.
     *
     * Registers all the frontend styles.
     *
     * Fired by `pagebuilder/footer` action.
     *
     */
    public function registerStyles()
    {

        $minSuffix = Configuration::debug() ? '' : '.min';

        /**
         * Before frontend register styles.
         *
         * Fires before SagoTheme frontend styles are registered.
         *
         */
        HooksHelper::doAction('pagebuilder/frontend/before_register_styles');

        $directionSuffix = DataHelper::isRtl() ? '-rtl' : '';

        $frontendFileUrl = 'Goomento_PageBuilder/build/frontend' . $directionSuffix . $minSuffix . '.css';

        ThemeHelper::registerStyle(
            'goomento-frontend',
            $frontendFileUrl,
            [],
            Configuration::version()
        );

        /**
         * After frontend register styles.
         *
         * Fires after SagoTheme frontend styles are registered.
         *
         */
        HooksHelper::doAction('pagebuilder/frontend/after_register_styles');
    }

    /**
     * Enqueue scripts.
     *
     * Enqueue all the frontend scripts.
     *
     */
    public function enqueueScripts()
    {
        /**
         * Before frontend enqueue scripts.
         *
         * Fires before SagoTheme frontend scripts are enqueued.
         *
         */
        HooksHelper::doAction('pagebuilder/frontend/before_enqueue_scripts');

        ThemeHelper::enqueueScript('goomento-frontend');

        /**
         * After frontend enqueue scripts.
         *
         * Fires after SagoTheme frontend scripts are enqueued.
         *
         */
        HooksHelper::doAction('pagebuilder/frontend/after_enqueue_scripts');
    }

    /**
     * Enqueue styles.
     *
     * Enqueue all the frontend styles.
     *
     * Fired by `pagebuilder/footer` action.
     *
     */
    public function enqueueStyles()
    {
        /**
         * Before frontend styles enqueued.
         *
         * Fires before SagoTheme frontend styles are enqueued.
         *
         */
        HooksHelper::doAction('pagebuilder/frontend/before_enqueue_styles');

        ThemeHelper::enqueueStyle('fontawesome');
        ThemeHelper::enqueueStyle('goomento-animations');

        ThemeHelper::enqueueStyle('goomento-frontend');

        /**
         * After frontend styles enqueued.
         *
         * Fires after SagoTheme frontend styles are enqueued.
         *
         */
        HooksHelper::doAction('pagebuilder/frontend/after_enqueue_styles');

        if (!StateHelper::isEditorPreviewMode()) {
            $this->parseGlobalCssCode();
        }
    }

    /**
     * Run header hook
     */
    public function header()
    {
        $this->enqueueStyles();
    }

    /**
     * Run footer hook
     */
    public function footer()
    {
        $this->enqueueScripts();
        if (!DataHelper::isLocalFont()) {
            $this->printFontsLinks();
        }
    }

    /**
     * Print fonts links.
     *
     * Enqueue all the frontend fonts by url.
     *
     *
     */
    public function printFontsLinks()
    {
        $google_fonts = [
            'google' => [],
            'early' => [],
        ];

        foreach ($this->fontsToEnqueue as $key => $font) {
            $font_type = Fonts::getFontType($font);

            switch ($font_type) {
                case Fonts::GOOGLE:
                    $google_fonts['google'][] = $font;
                    break;

                case Fonts::EARLYACCESS:
                    $google_fonts['early'][] = $font;
                    break;

                case false:
                    break;
                default:
                    /**
                     * Print font links.
                     *
                     * Fires when SagoTheme frontend fonts are printed on the HEAD tag.
                     *
                     * The dynamic portion of the hook name, `$font_type`, refers to the font type.
                     *
                     *
                     * @param string $font Font name.
                     */
                    HooksHelper::doAction("pagebuilder/fonts/print_font_links/{$font_type}", $font);
            }
        }
        $this->fontsToEnqueue = [];

        $this->enqueueGoogleFonts($google_fonts);
    }

    /**
     * Print Google fonts.
     *
     * Enqueue all the frontend Google fonts.
     *
     *
     * @param array $google_fonts Optional. Google fonts to print in the frontend.
     *                            Default is an empty array.
     */
    private function enqueueGoogleFonts($google_fonts = [])
    {
        static $google_fonts_index = 0;

        $print_google_fonts = true;

        /**
         * Print frontend google fonts.
         *
         * Filters whether to enqueue Google fonts in the frontend.
         *
         *
         * @param bool $print_google_fonts Whether to enqueue Google fonts. Default is true.
         */
        $print_google_fonts = HooksHelper::applyFilters('pagebuilder/frontend/print_google_fonts', $print_google_fonts);

        if (!$print_google_fonts) {
            return;
        }

        // Print used fonts
        if (!empty($google_fonts['google'])) {
            $google_fonts_index++;

            foreach ($google_fonts['google'] as &$font) {
                $font = str_replace(' ', '+', $font) . ':100,100italic,200,200italic,300,300italic,400,400italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic';
            }

            $fonts_url = sprintf('https://fonts.googleapis.com/css?family=%s', implode(rawurlencode('|'), $google_fonts['google']));

            $subsets = [
                'ru_RU' => 'cyrillic',
                'bg_BG' => 'cyrillic',
                'he_IL' => 'hebrew',
                'el' => 'greek',
                'vi' => 'vietnamese',
                'uk' => 'cyrillic',
                'cs_CZ' => 'latin-ext',
                'ro_RO' => 'latin-ext',
                'pl_PL' => 'latin-ext',
            ];
            $locale = 'EN-en';

            if (isset($subsets[ $locale ])) {
                $fonts_url .= '&subset=' . $subsets[ $locale ];
            }

            $fonts_url .= '&display=swap';

            ThemeHelper::registerStyle('google-fonts-' . $google_fonts_index, $fonts_url);
            ThemeHelper::enqueueStyle('google-fonts-' . $google_fonts_index);
        }

        if (!empty($google_fonts['early'])) {
            foreach ($google_fonts['early'] as $current_font) {
                $google_fonts_index++;

                $font_url = sprintf('https://fonts.googleapis.com/earlyaccess/%s.css', strtolower(str_replace(' ', '', $current_font)));

                ThemeHelper::registerStyle('google-earlyaccess-' . $google_fonts_index, $font_url);
                ThemeHelper::enqueueStyle('google-earlyaccess-' . $google_fonts_index);
            }
        }
    }

    /**
     * Enqueue fonts.
     *
     * Enqueue all the frontend fonts.
     *
     *
     * @param array $font Fonts to enqueue in the frontend.
     */
    public function enqueueFont($font)
    {
        if (in_array($font, $this->registeredFonts)) {
            return;
        }

        $this->fontsToEnqueue[] = $font;
        $this->registeredFonts[] = $font;
    }

    /**
     * Parse global CSS.
     *
     * Enqueue the global CSS file.
     *
     */
    protected function parseGlobalCssCode()
    {
        $globalCss = new GlobalCss();
        $globalCss->enqueue();
    }

    /**
     * Apply builder in content.
     *
     * Used to apply the SagoTheme page editor on the post content.
     *
     * @param BuildableContentInterface $content The content.
     *
     * @return BuildableContentInterface The post content.
     */
    public function applyBuilderInContent(BuildableContentInterface $content)
    {
        $this->restoreContentFilters();

        if (StateHelper::isEditorPreviewMode()) {
            return $content;
        }

        $this->removeContentFilter();

        $content->setRenderContent((string) $this->getBuilderContent( $content ));

        $this->addContentFilter();

        return $content;
    }

    /**
     * Retrieve builder content.
     *
     * Used to render and return the post content with all the SagoTheme elements.
     *
     * Note that this method is an internal method, please use `get_builder_content_for_display()`.
     *
     * @param BuildableContentInterface $buildableContent
     * @return string The post content.
     */
    public function getBuilderContent(BuildableContentInterface $buildableContent)
    {
        $document = ObjectManagerHelper::getDocumentsManager()->getByContent(
            $buildableContent
        );

        $data = $document->getElementsData();

        /**
         * Frontend builder content data.
         *
         * Filters the builder content in the frontend.
         *
         *
         * @param array $data    The builder content.
         * @param int   $contentId The conent ID.
         */
        $data = HooksHelper::applyFilters('pagebuilder/frontend/builder_content_data', $data, $buildableContent);

        if (empty($data)) {
            return '';
        }

        $cssFile = new ContentCss($document->getModel());

        ob_start();

        HooksHelper::addAction('pagebuilder/frontend/enqueue_scripts', [$cssFile, 'enqueue']);

        if (!empty($cssFile) && RequestHelper::isAjax()) {
            $cssFile->printCss();
        }

        $document->printElementsWithWrapper($data);

        $html = ob_get_clean();

        /**
         * Frontend content.
         *
         * Filters the content in the frontend.
         *
         *
         * @param string $content The content.
         */
        return HooksHelper::applyFilters('pagebuilder/the_content', $html);
    }

    /**
     * Get Init AbstractSettings
     *
     * Used to define the default/initial settings of the object. Inheriting classes may implement this method to define
     * their own default/initial settings.
     *
     * @return array
     */
    protected function getInitSettings()
    {
        $isPreviewMode = StateHelper::isEditorPreviewMode();

        $settings = [
            'environmentMode' => [
                'edit' => $isPreviewMode,
            ],
            'is_rtl' => DataHelper::isRtl(),
            'breakpoints' => Configuration::DEFAULT_BREAKPOINTS,
            'version' => Configuration::version(),
            'urls' => [
                'assets' => UrlBuilderHelper::urlStaticBuilder('Goomento_PageBuilder') . '/',
            ],
        ];

        $settings['settings'] = ObjectManagerHelper::getSettingsManager()->getSettingsFrontendConfig();

        $empty_object = (object) [];

        if ($isPreviewMode) {
            $settings['elements'] = [
                'data' => $empty_object,
                'editSettings' => $empty_object,
                'keys' => $empty_object,
            ];
        }

        /**
         * Allows to modify this
         */
        return HooksHelper::applyFilters('pagebuilder/frontend/js_variables', $settings);
    }

    /**
     * Restore content filters.
     */
    private function restoreContentFilters()
    {
        foreach ($this->contentRemovedFilters as $filter) {
            HooksHelper::addFilter('pagebuilder/content/html', $filter);
        }

        $this->contentRemovedFilters = [];
    }
}
